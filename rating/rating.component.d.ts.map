{"version":3,"file":"rating.component.d.ts","sources":["rating.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare const RATING_CONTROL_VALUE_ACCESSOR: any;\nexport declare class RatingComponent implements ControlValueAccessor, OnInit {\n    /** number of icons */\n    max: number;\n    /** selected icon class */\n    stateOn: string;\n    /** unselected icon class */\n    stateOff: string;\n    /** if true will not react on any user events */\n    readonly: boolean;\n    /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n    titles: string[];\n    /** array of custom icons classes */\n    ratingStates: {\n        stateOn: string;\n        stateOff: string;\n    }[];\n    /** fired when icon selected, $event:number equals to selected rating */\n    onHover: EventEmitter<number>;\n    /** fired when icon selected, $event:number equals to previous rating value */\n    onLeave: EventEmitter<number>;\n    onChange: any;\n    onTouched: any;\n    range: any[];\n    value: number;\n    protected preValue: number;\n    onKeydown(event: any): void;\n    ngOnInit(): void;\n    writeValue(value: number): void;\n    enter(value: number): void;\n    reset(): void;\n    registerOnChange(fn: (_: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    rate(value: number): void;\n    protected buildTemplateObjects(ratingStates: any[], max: number): any[];\n}\n"]}